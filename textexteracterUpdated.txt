package edu.uab.dustinrm.textextracter;

import javafx.event.ActionEvent;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.TextField;
import javafx.scene.control.Label;
import javafx.stage.FileChooser;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.fxml.FXML;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javafx.scene.layout.VBox;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.pdfbox.pdmodel.PDDocument;

public class PrimaryController {

    @FXML
    private Button browseFileButton;
    @FXML
    private VBox windowPane;
    @FXML
    private Label fileLabel;
    @FXML
    private TextField startPage;
    @FXML
    private TextField endPage;
    @FXML
    private Button backButton;
    @FXML
    private Button extractButton;
    @FXML
    private CheckBox pageCheck;
    @FXML
    private CheckBox pagesCheck;
    @FXML
    private TextField outputFileName;
    @FXML
    private Label outputFileNameLabel;
    @FXML
    private Alert pageError;
    PDDocument baseDocument;

    @FXML
    private void browseFile(ActionEvent event) {

        FileChooser fileChooser = new FileChooser();
        //adding file filters
        fileChooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("PDF Documents", "*.pdf"));

        try {
            File basePDF = fileChooser.showOpenDialog(windowPane.getScene().getWindow());
            fileLabel.setText(basePDF.getName());
            baseDocument = PDDocument.load(basePDF);
        } catch (IOException e) {

        }
    }

    @FXML
    private void extractByPage(ActionEvent event) {
        if (pageCheck.selectedProperty().get()) {
            startPage.setEditable(true);
        } else {
            if(!pagesCheck.selectedProperty().get()){
                startPage.setEditable(false);
            }
            
        }

    }

    @FXML
    private void extractText(ActionEvent event) {
        pageError = new Alert(AlertType.ERROR);
        pageError.setHeaderText("Page Input Error");
        try {
            File outputFile = new File(outputFileName.getText());
            PDFTextStripper extract = new PDFTextStripper();
            FileWriter writer = new FileWriter(outputFile);
            if (pageCheck.selectedProperty().get() && !pagesCheck.selectedProperty().get()) {
                if (isNumeric(startPage.getText())) {
                    if (Integer.parseInt(startPage.getText()) <= baseDocument.getNumberOfPages() && Integer.parseInt(startPage.getText()) > 0) {
                        //extracting a single page
                        extract.setStartPage(Integer.parseInt(startPage.getCharacters().toString()));
                        extract.setEndPage(Integer.parseInt(startPage.getCharacters().toString()));
                        String extractedText = extract.getText(baseDocument);
                        writer.write(extractedText);
                        writer.close();
                    } else {
                        //page out of bounds of pdf document
                        pageError.setContentText("Page Out Of Bounds");
                        pageError.showAndWait();
                        writer.close();
                    }
                } else {
                    pageError.setContentText("Page input must be integers");
                    pageError.showAndWait();
                    writer.close();
                }

            } else if (pagesCheck.selectedProperty().get()) {
                if (isNumeric(startPage.getText()) && isNumeric(endPage.getText())) {
                    if (Integer.parseInt(startPage.getText()) <= baseDocument.getNumberOfPages() && Integer.parseInt(startPage.getText()) > 0) {
                        if (Integer.parseInt(endPage.getText()) <= baseDocument.getNumberOfPages() && Integer.parseInt(endPage.getText()) > 0) {
                            //extracting multiple pages
                            extract.setStartPage(Integer.parseInt(startPage.getCharacters().toString()));
                            extract.setEndPage(Integer.parseInt(endPage.getCharacters().toString()));
                            String extractedText = extract.getText(baseDocument);
                            writer.write(extractedText);
                            writer.close();
                        } else {
                            //page out of bounds of pdf document
                            pageError.setContentText("Page Out Of Bounds");
                            pageError.showAndWait();
                            writer.close();
                        }

                    } else {
                        //page out of bounds of pdf document
                        pageError.setContentText("Page Out Of Bounds");
                        pageError.showAndWait();
                        writer.close();
                    }

                } else {
                    pageError.setContentText("Page Input Must Be Integers");
                    pageError.showAndWait();
                }

            } else {
                //extracting everything
                String extractedText = extract.getText(baseDocument);
                writer.write(extractedText);
                writer.close();
            }
        } catch (IOException e) {

        }
    }

    @FXML
    private void backButton(ActionEvent event) {
    }

    @FXML
    private void extractByPages(ActionEvent event) {
        if (pagesCheck.selectedProperty().get()) {
            startPage.setEditable(true);
            endPage.setEditable(true);
        } else {
            if (!pageCheck.selectedProperty().get()) {
                startPage.setEditable(false);
            }
            endPage.setEditable(false);
        }

    }

    @FXML
    private void fileNameEnter(ActionEvent event) {
        outputFileNameLabel.setText(outputFileName.getText());
    }

    public static boolean isNumeric(String pageInput) {
        if (pageInput == null) {
            return false;
        }
        try {
            int pageNumber = Integer.parseInt(pageInput);
        } catch (NumberFormatException e) {
            return false;
        }
        return true;
    }

}
